{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","title","poster","genres","synopsis","react_default","a","createElement","className","MoviePoster","alt","MovieGenre","genre","lib_default","text","maxLine","ellipsis","trimRight","basedOn","_ref2","src","_ref3","prototype","propTypes","string","isRequired","array","App","state","_renderMovies","_this","movies","map","movie","src_Movie","title_english","medium_cover_image","key","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAuBA,SAASA,EAATC,GAAiD,IAAjCC,EAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,OAAQC,EAAkBH,EAAlBG,OAAQC,EAAUJ,EAAVI,SACnC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaP,OAAQA,EAAQQ,IAAKT,KAEtCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACI,EAAD,CAAYC,MAAOT,KAEvBE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACbH,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACIQ,KAAMV,EACNW,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,eAoB5B,SAAST,EAATU,GAAmC,IAAbjB,EAAaiB,EAAbjB,OAAQQ,EAAKS,EAALT,IAC1B,OACIL,EAAAC,EAAAC,cAAA,OAAKa,IAAOlB,EAAQQ,IAAKA,EAAKT,MAAOS,EAAKF,UAAU,kBAG5D,SAASG,EAATU,GAA4B,IAAPT,EAAOS,EAAPT,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBI,EAAhC,KAIRb,EAAMuB,UAAY,CACdrB,MAAQsB,IAAUC,OAAOC,WACzBvB,OAASqB,IAAUC,OAAOC,WAC1BtB,OAASoB,IAAUG,MAAMD,WACzBrB,SAAWmB,IAAUC,OAAOC,YAEhChB,EAAYa,UAAY,CACpBpB,OAASqB,IAAUC,OAAOC,WAC1Bf,IAAMa,IAAUC,OAAOC,YAE3Bd,EAAWW,UAAY,CACnBV,MAAQW,IAAUC,OAAOC,YAGd1B,QChCA4B,6MA7CbC,MAAQ,KAKRC,cAAgB,WAWd,OAVeC,EAAKF,MAAMG,OAAOC,IAAI,SAAAC,GAEnC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,CACLjC,MAAOgC,EAAME,cACbjC,OAAQ+B,EAAMG,mBACdC,IAAKJ,EAAMK,GACXnC,OAAQ8B,EAAM9B,OACdC,SAAU6B,EAAM7B,gBAMtBmC,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUf,EAAKgB,WADf,OACLf,EADKY,EAAAI,KAEXjB,EAAKkB,SAAS,CACZjB,WAHS,wBAAAY,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MAAM,yDAEZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKxB,SACvByB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA5B5BP,KAAKX,8CA+BI,IAECR,EAAWmB,KAAKtB,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAWuB,EAAS,MAAQ,eAChCA,EAASmB,KAAKrB,gBAAkB,UADjC,YA1CY+B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.dd17ef06.chunk.js","sourcesContent":["//import React, { Component } from 'react';\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport LinesFllipis from 'react-lines-ellipsis';\nimport './Movie.css';\n/*\nclass Movie extends Component{\n    static propTypes = {\n        title : propTypes.string.isRequired,\n        poster : propTypes.string.isRequired\n    }\n    render(){\n        return(\n            <div>\n                <MoviePoster poster={this.props.poster}/>\n                <h1>{this.props.title}</h1>\n            </div>\n            \n        )\n    }\n}\n*/\n//{genres.map((genre, index) => <MovieGenre genre={genres} key={index}/>)} \nfunction Movie({title, poster, genres, synopsis}){\n    return(\n        <div className=\"Movie\">\n            <div className=\"Movie__Columns\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie__Columns\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    <MovieGenre genre={genres} />\n                </div>\n                <p className=\"Movie__Synopsis\">  \n                <LinesFllipis\n                    text={synopsis}\n                    maxLine='3'\n                    ellipsis='...'\n                    trimRight\n                    basedOn='letters'\n                />\n                </p>\n            </div>\n        </div>\n    )\n}\n\n/*\nclass MoviePoster extends Component{\n    static propTypes = {\n        poster : propTypes.string.isRequired\n    }\n    render(){\n        return(\n            <img src={this.props.poster} alt=\"Movie Poster\" />\n        )\n    }\n}\n*/\nfunction MoviePoster({poster, alt}){\n    return(\n        <img src = {poster} alt={alt} title={alt} className=\"Movie__Poster\" />\n    )\n}\nfunction MovieGenre({genre}){\n    return(\n        <span className=\"Movie__Genre\">{genre} </span>\n    )\n}\n\nMovie.prototype = {\n    title : propTypes.string.isRequired,\n    poster : propTypes.string.isRequired,\n    genres : propTypes.array.isRequired,\n    synopsis : propTypes.string.isRequired\n}\nMoviePoster.prototype = {\n    poster : propTypes.string.isRequired,\n    alt : propTypes.string.isRequired\n}\nMovieGenre.prototype = {\n    genre : propTypes.string.isRequired\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Update componentWillReceiveProps() -> souldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  state = {}\n\ncomponentDidMount(){\n  this._getMovies();\n}\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      //console.log(movie)\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    //return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err)) \n  }\n\n  render() {\n    //console.log(\"did render\");\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n      {movies ? this._renderMovies() : 'Loading'};\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}